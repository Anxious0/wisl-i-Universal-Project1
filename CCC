
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

local DEFAULT_WALK_SPEED = 16
local DEFAULT_JUMP_POWER = 50
local BRING_DISTANCE = 3
local BRING_TWEEN_TIME = 0.5

local PlayerStates = {
    bringing = {},
    frozen = {},
    usingScript = {} 
}

local Admins = {
    owners = {
        "4xrqi",
        "",
        ""
    },
    mods = {
        "",
        "",
        ""
    }
}

local PermissionLevels = {
    OWNER = 3,
    MOD = 2,
    NORMAL = 0,
    NONE = 0
}

local PlayerUtils = {}

function PlayerUtils.findPlayer(name)
    name = name:lower()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name:lower():sub(1, #name) == name or 
           player.DisplayName:lower():sub(1, #name) == name then
            return player
        end
    end
    return nil
end

function PlayerUtils.getAdminLevel(player)
    local name = player.Name:lower()
    
    for _, owner in ipairs(Admins.owners) do
        if name == owner:lower() then
            return PermissionLevels.OWNER
        end
    end
    
    for _, mod in ipairs(Admins.mods) do
        if name == mod:lower() then
            return PermissionLevels.MOD
        end
    end
    
    if PlayerStates.usingScript[player.Name] then
        return PermissionLevels.NORMAL
    end
    
    return PermissionLevels.NONE
end

function PlayerUtils.canUseCommand(player, targetPlayer)
    local playerLevel = PlayerUtils.getAdminLevel(player)
    local targetLevel = PlayerUtils.getAdminLevel(targetPlayer)
    
    if playerLevel <= PermissionLevels.NONE then
        return false
    end
    
    return playerLevel > targetLevel
end

function PlayerUtils.getAdminLevelName(player)
    local level = PlayerUtils.getAdminLevel(player)
    
    if level == PermissionLevels.OWNER then
        return "owner"
    elseif level == PermissionLevels.MOD then
        return "mod"
    elseif level == PermissionLevels.NORMAL then
        return "normal"
    else
        return "none"
    end
end

local Commands = {}

function Commands.kick(targetPlayer, reason)
    if targetPlayer then
        targetPlayer:Kick(reason or "Kicked by admin")
        return true
    end
    return false
end

function Commands.bring(targetPlayer, owner)
    if not (targetPlayer and owner) then return false end
    
    if PlayerStates.bringing[targetPlayer.Name] then
        Commands.unbring(targetPlayer)
        wait(0.1) 
    end
    
    PlayerStates.bringing[targetPlayer.Name] = true
    
    spawn(function()
        while PlayerStates.bringing[targetPlayer.Name] do
            local ownerChar = owner.Character
            local targetChar = targetPlayer.Character
            
            if ownerChar and targetChar and 
               ownerChar:FindFirstChild("HumanoidRootPart") and 
               targetChar:FindFirstChild("HumanoidRootPart") then
                
                local humanoid = targetChar:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.JumpPower = 0
                end
                
                local targetPosition = ownerChar.PrimaryPart.CFrame * CFrame.new(0, 0, -BRING_DISTANCE)
                local tweenInfo = TweenInfo.new(BRING_TWEEN_TIME, Enum.EasingStyle.Quad)
                
                local tween = TweenService:Create(targetChar.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})
                tween:Play()
                tween.Completed:Wait()
            end
            wait(0.1)
        end
    end)
    
    return true
end

function Commands.unbring(targetPlayer)
    if not targetPlayer then return false end
    
    PlayerStates.bringing[targetPlayer.Name] = false
    
    local character = targetPlayer.Character
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.JumpPower = DEFAULT_JUMP_POWER
        end
    end
    
    return true
end

function Commands.freeze(targetPlayer)
    if not targetPlayer then return false end
    
    if PlayerStates.frozen[targetPlayer.Name] then
        Commands.unfreeze(targetPlayer)
        wait(0.1) 
    end
    
    local character = targetPlayer.Character
    if not character then return false end
    
    PlayerStates.frozen[targetPlayer.Name] = true
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    
    if humanoidRootPart then
        local originalPosition = humanoidRootPart.CFrame
        spawn(function()
            while PlayerStates.frozen[targetPlayer.Name] do
                if character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = originalPosition
                    character.HumanoidRootPart.Anchored = true
                    
                    for _, part in pairs(character:GetDescendants()) do
                        if part:IsA("BasePart") and part ~= humanoidRootPart then
                            part.Anchored = true
                        end
                    end
                else
                    break
                end
                wait()
            end
        end)
        return true
    end
    
    return false
end

function Commands.unfreeze(targetPlayer)
    if not targetPlayer then return false end
    
    PlayerStates.frozen[targetPlayer.Name] = false
    
    local character = targetPlayer.Character
    if character then
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = false
            end
        end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.JumpPower = DEFAULT_JUMP_POWER
        end
    end
    
    return true
end

function Commands.reset(targetPlayer)
    if not targetPlayer then return false end
    
    PlayerStates.bringing[targetPlayer.Name] = false
    PlayerStates.frozen[targetPlayer.Name] = false
    
    targetPlayer:LoadCharacter()
    
    return true
end

function Commands.tome(targetPlayer, adminPlayer)
    if not (targetPlayer and adminPlayer) then return false end
    
    local targetChar = targetPlayer.Character
    local adminChar = adminPlayer.Character
    
    if targetChar and adminChar then
        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
        local adminHRP = adminChar:FindFirstChild("HumanoidRootPart")
        
        if targetHRP and adminHRP then
            targetHRP.CFrame = adminHRP.CFrame
            return true
        end
    end
    
    return false
end

local function handleCommand(msg, player)
    if not (msg:match("^%.") or msg:match("^/e%s*%.")) then
        return
    end
    
    local cmd = msg:lower():gsub("^/e%s*", "")
    
    local commandName, targetName = cmd:match("^%.(%w+)%s+(%S+)")
    if not (commandName and targetName) then return end
    
    local targetPlayer = PlayerUtils.findPlayer(targetName)
    if not targetPlayer then
        return
    end
    
    if not PlayerUtils.canUseCommand(player, targetPlayer) then
        return
    end
    
    local success = false
    
    if commandName == "kick" then
        local reason = cmd:match("^.kick%s+%S+%s+(.*)")
        success = Commands.kick(targetPlayer, reason)
    elseif commandName == "bring" then
        success = Commands.bring(targetPlayer, player)
    elseif commandName == "unbring" then
        success = Commands.unbring(targetPlayer)
    elseif commandName == "reset" then
        success = Commands.reset(targetPlayer)
    elseif commandName == "freeze" then
        success = Commands.freeze(targetPlayer)
    elseif commandName == "unfreeze" then
        success = Commands.unfreeze(targetPlayer)
    elseif commandName == "tome" then 
        success = Commands.tome(targetPlayer, player)
    end
    
end

local function registerScriptUser(player)
    PlayerStates.usingScript[player.Name] = true
    
    player.Chatted:Connect(function(msg)
        handleCommand(msg, player)
    end)
    
    player.AncestryChanged:Connect(function(_, parent)
        if parent == nil then
            PlayerStates.usingScript[player.Name] = nil
            PlayerStates.bringing[player.Name] = nil
            PlayerStates.frozen[player.Name] = nil
        end
    end)
end

Players.PlayerAdded:Connect(function(player)
    registerScriptUser(player)
end)

Players.PlayerRemoving:Connect(function(player)
    PlayerStates.usingScript[player.Name] = nil
    PlayerStates.bringing[player.Name] = nil
    PlayerStates.frozen[player.Name] = nil
end)

for _, player in pairs(Players:GetPlayers()) do
    registerScriptUser(player)
end

return {
    PlayerUtils = PlayerUtils,
    Commands = Commands,
    
    RegisterScriptUser = function(player)
        if player and player:IsA("Player") then
            registerScriptUser(player)
            return true
        end
        return false
    end
}
