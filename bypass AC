local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer

local meta = getrawmetatable(game)
setreadonly(meta, false)
local oldNamecall = meta.__namecall

meta.__namecall = newcclosure(function(self, ...)
    local args = {...}
    local method = getnamecallmethod()
    
    if method == "Kick" or method == "kick" then
        warn("Kick attempt blocked!")
        return nil
    end
    return oldNamecall(self, unpack(args))
end)

setreadonly(meta, true)

local function createHook(func, maxRetries)
    maxRetries = maxRetries or 3
    return function(...)
        for i = 1, maxRetries do
            local success, result = pcall(func, ...)
            if success then return result end
            warn(string.format("Retry %d/%d: %s", i, maxRetries, tostring(result)))
            task.wait(1)
        end
        error("Function failed after multiple attempts")
    end
end

local function handleTeleport()
    player.OnTeleport:Connect(function(state)
        if state == Enum.TeleportState.Failed or state == Enum.TeleportState.Started then
            warn("Anti-kick: Attempting to rejoin...")
            for i = 1, 3 do
                task.wait(3)
                local success = pcall(function()
                    TeleportService:Teleport(game.PlaceId, player)
                end)
                if success then break end
            end
        end
    end)
end

local function setupCharacter(character)
    local humanoid = character:WaitForChild("Humanoid")
    local rootPart = character:WaitForChild("HumanoidRootPart")
    
    humanoid.Died:Connect(createHook(function()
        task.wait(3)
        warn("Character died, respawning...")
        player:LoadCharacter()
    end, 3))
end

TeleportService.Teleport = function(...)
    warn("Teleport attempt blocked!")
    return nil
end

player.CharacterAdded:Connect(createHook(setupCharacter, 3))

handleTeleport()
